-OSX
  -FontPicker fails to scroll things into view
  -I need alt-g to replace F3 or at least enhance it.
  -By default all your F-this and F-that function buttons are owned by apple.
    F3, F4, F8, F9, F12
    -KeyMapping
      -We really need a sorted properties file
  -Switch the file listener to using nio shared memory mappings.
  -We ought to make it where you can pick between fixed-width and not fixed-width fonts in the picker.
    FontRenderContext frc = new FontRenderContext(null, RenderingHints.VALUE_TEXT_ANTIALIAS_DEFAULT, RenderingHints.VALUE_FRACTIONALMETRICS_DEFAULT);
    for (Font font : fonts) {
        Rectangle2D iBounds = font.getStringBounds("i", frc);
        Rectangle2D mBounds = font.getStringBounds("m", frc);
        if (iBounds.getWidth() == mBounds.getWidth()) {
            monoFonts1.add(font);
        }
    }
  -Consider using the default java runtime and shrinking the deploy (leave after the = blank): -Bruntime=
  -To display an indicator that a window was modified, you need to use the Swing property Window.documentModified. It can be set on any subclass of JComponent that implements a top-level window using the putClientProperty() method. The value of the property is either Boolean.TRUE or Boolean.FALSE
  -Right click menu is still on ctrl-everything, shouldn't it go option-everything... and preserve ctrl-everything...
    -Undo, Redo, Cut, Copy, Paste
    -Also the top menu for undo/redo

-Current
  -Losing your command because you forgot to shut down the previous command and when you do bam the current one is gone. Sucks.

  -We should be able to fix the shell textbox using our Selectable class.

  -SSH Sudo

  -Help should should show the name of your current log file.

  -Alt-f-d doesn't work with ssh and needs to be disabled.

  -Hey and a menu item for File-Delete? With confirm of course. Hmph.

  -Load file & Find/replace are abusive. Fix them.
    -Load file ought to be able to find out about LF/CR/CRLF after the fact. Or just read a few lines. I don't know.

  -Tabs & Indents allows invalid input - letters instead of numbers

  -When I switch windows the cursor position frequently goes somewhere else

  -Ctrl-W ought to just close the editor if no files are open. It makes no difference.


-Maybe
  -SSH Todo:
    Single quotes in the filename are a bit of a problem, and double quotes, and whatever else.
    When we disconnect the network the ssh session doesn't know. We could do Session.sendKeepAliveMsg or Session.sendIgnore
    What about when a host key changes or is missing? Will we blow up?

  -File open ought to start off the session with the last directory opened.
   It's annoying when it defaults to my stupid home directory. Well ...ssh. Ugh.

  -Favorite commands.


  -Maybe a more sophisticated version of find/replace, where I break up the String? It is pretty slow on an 8MB file.
    -Loop thru 20000 characters at a time, appending last searchFor.length() from previous to first.
    -Note that java.util.regex.Matcher does have the ability to tell you that the end of a string is a partial match.
  -How about dual-window mode. Only two windows, that's it.
  -About should show an icon
  -Undo
    -Undo to last save?
    -You could have undostep include whether selection is forwards or backwards. Just a boolean.
  -Selected text color, selected background color
  -Indents & Tabs, Fonts should only enable ok button when something changes.
    -Also should show message when ok is clicked.

-Long term problems
  -Weird background bugs
    -Do you see that doo doo where java says it's starting up with mixed mode "sharing"?
    -Mostly when it runs two at once.
    -Exe alternatives?
      -Consider jexepack, which costs $100 or you get an alert everytime you open it.

  -Slow scrolling:
    -Too many key listeners?
    -Noticed that it seems to slow down with a lot of windows open. Hmph. Don't tell me I have to resort to... oh gawd no. Not recreating jtextareas when I switch windows. Horrors.



-Fixed?
  -New Klonk Bug - I have a fix in place per the ideas offered on stacko:
  Also consider the idea offered at bottom of this page:  http://stackoverflow.com/questions/6436944/java-illegalstateexception-buffers-have-not-been-created
  java.lang.IllegalStateException: Buffers have not been created
          at sun.awt.windows.WComponentPeer.getBackBuffer(Unknown Source)
          at java.awt.Component$FlipBufferStrategy.getBackBuffer(Unknown Source)
          at java.awt.Component$FlipBufferStrategy.updateInternalBuffers(Unknown Source)
          at java.awt.Component$FlipBufferStrategy.revalidate(Unknown Source)
          at java.awt.Component$FlipBufferStrategy.revalidate(Unknown Source)
          at java.awt.Component$FlipBufferStrategy.getDrawGraphics(Unknown Source)
          at javax.swing.BufferStrategyPaintManager.prepare(Unknown Source)
          at javax.swing.BufferStrategyPaintManager.paint(Unknown Source)
          at javax.swing.RepaintManager.paint(Unknown Source)
          at javax.swing.JComponent.paint(Unknown Source)
          at java.awt.GraphicsCallback$PaintCallback.run(Unknown Source)
          at sun.awt.SunGraphicsCallback.runOneComponent(Unknown Source)
          at sun.awt.SunGraphicsCallback.runComponents(Unknown Source)
          at java.awt.Container.paint(Unknown Source)
          at java.awt.Window.paint(Unknown Source)
          at javax.swing.RepaintManager$3.run(Unknown Source)
          at javax.swing.RepaintManager$3.run(Unknown Source)
          at java.security.AccessController.doPrivileged(Native Method)
          at java.security.ProtectionDomain$1.doIntersectionPrivilege(Unknown Source)
          at javax.swing.RepaintManager.paintDirtyRegions(Unknown Source)
          at javax.swing.RepaintManager.paintDirtyRegions(Unknown Source)
          at javax.swing.RepaintManager.prePaintDirtyRegions(Unknown Source)
          at javax.swing.RepaintManager.access$1100(Unknown Source)
          at javax.swing.RepaintManager$ProcessingRunnable.run(Unknown Source)
          at java.awt.event.InvocationEvent.dispatch(Unknown Source)
          at java.awt.EventQueue.dispatchEventImpl(Unknown Source)
          at java.awt.EventQueue.access$200(Unknown Source)
          at java.awt.EventQueue$3.run(Unknown Source)
