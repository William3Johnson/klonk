-Fixed?
  Fonts not resizing on windows:
    Switch menu
    File-Reopen
    File-Favorite files
      Changing fonts seems to make it behave. But if you start up without changing fonts, fuck.
  FontPicker is ugly misbehaving and bad
  -HOLY POO I can customize the caret! JTextArea.setCaret() and there's a DefaultCaret
    https://docs.oracle.com/javase/8/docs/api/javax/swing/text/DefaultCaret.html

-OSX
  -SO what about F11 & F12? Oh gawd, not Command-Backquote, I so hate that...
    F11 and shift F11 will be quote/backquote, and F12 will remain its illustrious self, since
    it has no standard mac equivalent
  -Unfortunately there's also undo - shift-ctrl-f9 and shift ctrl f12
  -Document all the changes

-Current
  -Get better performance by creating a NEW Document during load instead of using the one that's in the JTextArea. This apparently causes a lot of overhead otherwise.
  -What is this Ctrl-W thing in Editor.java? This is dumb

  -Shell
    -Losing your command because you forgot to shut down the previous command and when you do bam the current one is gone. Sucks.
    -We should be able to make the shell textbox act like our normal editor using our Selectable class.

  -Cursor does not move with mousewheel, only with page down.

  -File open ought to start off the session with the last directory opened.
   It's annoying when it defaults to my stupid home directory.
   But make sure to avoid SSH dirs.

-Hard
  -Load file & Find/replace are abusive. Fix them.
    -Load file ought to be able to find out about LF/CR/CRLF after the fact. Or just read a few lines. I don't know.

  -When I switch windows the cursor position frequently goes somewhere else

  -How about dual-window mode. Only two windows, that's it.

-Maybe
  -Hey and a menu item for File-Delete? With confirm of course. Hmph.

  -SSH Todo:
    Alt-f-d doesn't work with ssh and needs to be disabled.
    Sudo
    Single quotes in the filename are a bit of a problem, and double quotes, and whatever else.
    When we disconnect the network the ssh session doesn't know.
      We could do Session.sendKeepAliveMsg or Session.sendIgnore
    What about when a host key changes or is missing? Will we blow up?

  -Maybe a more sophisticated version of find/replace, where I break up the String? It is pretty slow on an 8MB file.
    -Loop thru 20000 characters at a time, appending last searchFor.length() from previous to first.
    -Note that java.util.regex.Matcher does have the ability to tell you that the end of a string is a partial match.
  -About should show an icon
  -Undo
    -Undo to last save?
    -You could have undostep include whether selection is forwards or backwards. Just a boolean.
  -Selected text color, selected background color
  -Indents & Tabs, Fonts should only enable ok button when something changes.

  -We ought to make it where you can pick between fixed-width and not fixed-width fonts in the picker.
    FontRenderContext frc = new FontRenderContext(
      null, RenderingHints.VALUE_TEXT_ANTIALIAS_DEFAULT, RenderingHints.VALUE_FRACTIONALMETRICS_DEFAULT
    );
    for (Font font : fonts) {
        Rectangle2D iBounds = font.getStringBounds("i", frc);
        Rectangle2D mBounds = font.getStringBounds("m", frc);
        if (iBounds.getWidth() == mBounds.getWidth()) {
            monoFonts1.add(font);
        }
    }

-On hold / Long term problems
  -Weird background bugs
    -Do you see that doo doo where java says it's starting up with mixed mode "sharing"?
    -Mostly when it runs two at once.

  -Exe alternatives?
    -Consider jexepack, which costs $100 or you get an alert everytime you open it.
    -javapackager seems to only create an annoying installer and you have to install a second thing.

  -Slow scrolling:
    -Too many key listeners?
    -Noticed that it seems to slow down with a lot of windows open. Hmph. Don't tell me I have to resort to... oh gawd no. Not recreating jtextareas when I switch windows. Horrors.

  -OSX Jitter: This is known. One suggested fix was trying to prevent horizontal events by consuming them but apparently this didn't help.
    https://bugs.openjdk.java.net/browse/JDK-8147994

  -OSX:Consider using the default java runtime and shrinking the deploy (leave after the = blank): -Bruntime=
    Didn't work. Couldn't find java when I did this.

-Fixed?
  -New Klonk Bug - I have a fix in place per the ideas offered on stacko:
  Also consider the idea offered at bottom of this page:  http://stackoverflow.com/questions/6436944/java-illegalstateexception-buffers-have-not-been-created
  java.lang.IllegalStateException: Buffers have not been created
          at sun.awt.windows.WComponentPeer.getBackBuffer(Unknown Source)
          at java.awt.Component$FlipBufferStrategy.getBackBuffer(Unknown Source)
          at java.awt.Component$FlipBufferStrategy.updateInternalBuffers(Unknown Source)
          at java.awt.Component$FlipBufferStrategy.revalidate(Unknown Source)
          at java.awt.Component$FlipBufferStrategy.revalidate(Unknown Source)
          at java.awt.Component$FlipBufferStrategy.getDrawGraphics(Unknown Source)
          at javax.swing.BufferStrategyPaintManager.prepare(Unknown Source)
          at javax.swing.BufferStrategyPaintManager.paint(Unknown Source)
          at javax.swing.RepaintManager.paint(Unknown Source)
          at javax.swing.JComponent.paint(Unknown Source)
          at java.awt.GraphicsCallback$PaintCallback.run(Unknown Source)
          at sun.awt.SunGraphicsCallback.runOneComponent(Unknown Source)
          at sun.awt.SunGraphicsCallback.runComponents(Unknown Source)
          at java.awt.Container.paint(Unknown Source)
          at java.awt.Window.paint(Unknown Source)
          at javax.swing.RepaintManager$3.run(Unknown Source)
          at javax.swing.RepaintManager$3.run(Unknown Source)
          at java.security.AccessController.doPrivileged(Native Method)
          at java.security.ProtectionDomain$1.doIntersectionPrivilege(Unknown Source)
          at javax.swing.RepaintManager.paintDirtyRegions(Unknown Source)
          at javax.swing.RepaintManager.paintDirtyRegions(Unknown Source)
          at javax.swing.RepaintManager.prePaintDirtyRegions(Unknown Source)
          at javax.swing.RepaintManager.access$1100(Unknown Source)
          at javax.swing.RepaintManager$ProcessingRunnable.run(Unknown Source)
          at java.awt.event.InvocationEvent.dispatch(Unknown Source)
          at java.awt.EventQueue.dispatchEventImpl(Unknown Source)
          at java.awt.EventQueue.access$200(Unknown Source)
          at java.awt.EventQueue$3.run(Unknown Source)
wefwe fwef.