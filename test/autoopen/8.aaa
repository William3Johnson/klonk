	eeeeeeeeeeeeeeee8 8 8
Check it one more time.
Check it now.
Check it.

package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
q z d
a b
c
EEEEEAWEFAWEFC
E
sCheck it one more time.
Check it now.
Check it.

package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
q z d
a b
c
EEEEEAWEFAWEFC
E
sCheck it one more time.
Check it now.
Check it.

package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
q z d
a b
c
EEEEEAWEFAWEFC
E
sCheck it one more time.
Check it now.
Check it.

package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
q z d
a b
c
EEEEEAWEFAWEFC
E
sCheck it one more time.
Check it now.
Check it.

package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
q z d
a b
c
EEEEEAWEFAWEFC
E
sCheck it one more time.
Check it now.
Check it.

package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
package org.tmotte.klonk;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.awt.ScrollPane;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import javax.swing.BoxLayout;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.text.Document;

/**
 * Next step: Window close event. Handle it.
 * Next step: Open and save a file. 
 * Next step: Get starting directory from shell.
 * Next step: Ask user before closing without saving.
 */ 
public class Klonk {
  
  public static void main(final String[] args) {
    javax.swing.SwingUtilities.invokeLater(new Runnable() {
      public void run() {
        new Klonk().startMainFrame(args);
      }
    });  
  }
  
  JFrame frame;
  public JTextArea getEditor() {
    return jta;
  }
  public JFrame getFrame() {
    return frame;
  }
  
  private void startMainFrame() {
    startMainFrame(null);
  }
  private void startMainFrame(String[] args) {
    frame = new JFrame("Klonk");
    frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);  
    new Menus().attach(this);
    doLayout(frame.getContentPane());
    frame.pack();
    frame.setSize(new Dimension(300,300));
    frame.setLocation(100,100);
    frame.setVisible(true);
    frame.addWindowListener(winListen);
    if (args!=null  && args.length>0 && !args[0].trim().equals(""))
      loadFile(args[0].trim());//FIXME more than one
  }


  
  
  private WindowListener winListen=new WindowAdapter() {
    public void windowClosing(WindowEvent e){
      doWindowClose();
    }
  };
  

 

  private void doLayout(Container cont){
    cont.setLayout(new BoxLayout(cont, BoxLayout.Y_AXIS));
    makeTextArea(cont);
  }

  JTextArea jta;
  Document doc;
  private void makeTextArea(Container cont) {
    jta=new JTextArea();
    JScrollPane jsp=new JScrollPane(jta);
    cont.add(jsp);

    setLineWrap();
    setFont();
    setEvents();

    //This has all the text goodies: length and so on:
    doc=jta.getDocument();
  }

  private void setLineWrap() {
    jta.setLineWrap(true);
    jta.setWrapStyleWord(true);
  }
  private void setFont() {
    Font font = new Font("Courier New", Font.PLAIN, 12);
    jta.setFont(font);
  }
  private void setEvents() {
    jta.addCaretListener(new MyCaretListener());
    jta.addKeyListener(new MyKeyListener());
    jta.getDocument().addDocumentListener(new MyDocumentListener());
  }


  
  private class MyCaretListener implements CaretListener {
    public void caretUpdate(CaretEvent e) {
      //System.out.print(" Caret: "+e.getDot()+"-"+e.getMark());
    }
  }
  private class MyKeyListener implements KeyListener {
    //Use KeyEvent.consume() to kill off key presses that you've already
    //handled. It has to be done in multiple events.
    public void keyPressed(KeyEvent e){
      //System.out.print(" Key event "+e.getKeyCode()+"-"+e.getModifiers());
    }
    public void keyReleased(KeyEvent e){
    }
    public void keyTyped(KeyEvent e) {      
    }
  }
  protected class MyDocumentListener implements DocumentListener {
    public void insertUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void removeUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    public void changedUpdate(DocumentEvent e) {
      displayEditInfo(e);
    }
    private void displayEditInfo(DocumentEvent e) {
      Document document = (Document)e.getDocument();
      //System.out.print(" "+e.getType().toString()+":"+e.getOffset()+":"+e.getLength());
    }
  }   
   
   
   


  public void loadFile(String dir, String name) {
    if (!dir.endsWith(File.separator))
      dir+=File.separator;
    loadFile(dir+name, 4096);
  }
  public void loadFile(String name) {
    loadFile(name, 4096);
  }
  private void loadFile(String name, int approxlen) {
    try {
      jta.setText("");
      char[] readBuffer=new char[Math.min(4096, approxlen)];
      File file=new File(name);
      System.out.println(file.toString());
      InputStreamReader br=new InputStreamReader(new FileInputStream(file));
      try {
        int charsRead;
        while ((charsRead=br.read(readBuffer, 0, readBuffer.length))>0)
          jta.append(new String(readBuffer, 0, charsRead));
      } finally {
        br.close();
      }    
    } catch (Exception e) {
      throw new RuntimeException("Failed to load "+name, e);//FIXME
    }
    jta.setCaretPosition(0);
  }

  public void doWindowClose() {
    System.out.println("Closing window");
    frame.dispose();
    System.exit(0);
  }

  private void displayFonts() {
    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
    Font[] fonts=ge.getAllFonts();
    StringBuilder sb=new StringBuilder();
    for (Font f: fonts) {
      sb.append(f.getName()+"\n");
    }
    jta.insert(sb.toString(), 0);
  }
  
}
q z d
a b
c
EEEEEAWEFAWEFC
E
